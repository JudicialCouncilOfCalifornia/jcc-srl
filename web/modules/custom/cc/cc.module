<?php

/**
 * @file
 * Contains cc.module.
 */

use Drupal\cc\ConditionalDisplay;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function cc_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cc module.
    case 'help.page.cc':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Content tailored to user input.') . '</p>';
      return $output;

    default:
      return NULL;
  }
}

/**
 * Implements hook_theme().
 */
function cc_theme($existing, $type, $theme, $path) {
  return [
    'cc_conditional_display_element' => [
      'render element' => 'element',
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function cc_field_widget_third_party_settings_form(
  WidgetInterface $plugin,
  FieldDefinitionInterface $field_definition,
  $form_mode,
  array $form,
  FormStateInterface $form_state
) {

  // Add checkbox to widget settings.
  $element = function ($default_value) {
    return [
      'status' => [
        '#type' => 'checkbox',
        '#title' => t('Enable conditional display'),
        '#default_value' => $default_value,
      ]
    ];
  };
  switch ($field_definition->getType()) {

    case 'entity_reference':
    case 'entity_reference_revisions':
      return $element($plugin->getThirdPartySetting('cc', 'status'));
      break;

  }

  return NULL;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * @throws \Exception
 */
function cc_field_widget_form_alter(
  &$element,
  FormStateInterface $form_state,
  &$context
) {

  // Add conditional elements to widget.
  /** @var WidgetInterface $widget */
  $widget = $context['widget'];
  if ($widget->getThirdPartySetting('cc', 'status')) {

    // The parent field.
    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
    $items = $context['items'];
    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $field */
    if ($field = $items->get($context['delta'])) {

      $field_name = $field->getFieldDefinition()->getName();

      // The host entity.
      /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
      $entity = $field->getEntity();

      $widget_state = ConditionalDisplay::getWidgetState(
        $entity->uuid(), $field_name, $context['delta'], $form_state);
      /** @var ConditionalDisplay $cc */
      if ($widget_state && isset($widget_state['entity'])) {
        $cc = $widget_state['entity'];
      }
      else {
        $cc = new ConditionalDisplay(
          $entity,
          $field_name,
          $context['delta']);
        $state = [
          'entity' => $cc,
        ];
        ConditionalDisplay::setWidgetState(
          $entity->uuid(), $field_name, $context['delta'], $form_state, $state);
      }
      $element['cc'] = $cc->getWidgetElement($context['form'], $form_state);

    }
  }

}

/**
 * Implements hook_form_alter().
 *
 * Adds form submit handler when form contains conditional display elements.
 *
 * @throws \Exception
 */
function cc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $find_cc = function (&$element) use (&$find_cc) {
    foreach (Element::children($element) as $field_name) {
      $child = &$element[$field_name];
      if (@$child['cc']) {
        return TRUE;
      }
      elseif ($find_cc($child)) {
        return TRUE;
      }
    }
    return FALSE;
  };
  if ($find_cc($form)) {
    if (isset($form['actions']['submit']['#submit'])) {
      $form['actions']['submit']['#submit'][] = 'cc_form_submit';
    }
    else {
      throw new Exception('Unexpected form structure.');
    }
  }
}

/**
 * Submit handler for forms with conditional display elements.
 *
 * @see cc_form_alter()
 */
function cc_form_submit(array &$form, FormStateInterface $form_state) {
  // Finds elements with conditional display.
  $process_elements = function (&$element) use (&$process_elements, &$form, $form_state) {
    foreach (Element::children($element) as $field_name) {
      $child = &$element[$field_name];
      if (@$child['cc']) {
        ConditionalDisplay::processElement($child['cc'], $form, $form_state, TRUE);
      }
      $process_elements($child);
    }
  };

  $process_elements($form);
}

/**
 * Implements hook_entity_display_build_alter().
 *
 * Check user input for each conditional display.
 *
 * @throws \Exception
 */
function cc_entity_display_build_alter(&$build, $context) {

  // Any conditional displays for this entity.
  /** @var \Drupal\Core\Entity\EntityInterface $host_entity */
  $host_entity = $context['entity'];
  foreach (ConditionalDisplay::getConditionalDisplays($host_entity) as $cc) {

    // Make sure the conditional field is present.
    if (!isset($build[$cc->getFieldName()][$cc->getFieldDelta()])) {
      continue;
    }

    // Check for user input.
    $user_input = [];
    if (Drupal::request()->query->get('form_id') == 'cc_user_input') {
      $keys = array_unique(array_map(function ($condition) {
        return $condition['uuid'];
      }, $cc->getConditions()->getConditions()));
      foreach ($keys as $key) {
        if ($input = Drupal::request()->query->get($key)) {
          if (is_array($input)) {
            $user_input[$key] = $input;
          }
          else {
            $user_input[$key] = [$input => $input];
          }
        }
      }
    }

    // Evaluate conditions and hide when FALSE.
    if (!$cc->getConditions()->eval($user_input)) {
      switch ($build[$cc->getFieldName()]['#field_type']) {

        case 'entity_reference_revisions':
          $build[$cc->getFieldName()][$cc->getFieldDelta()]['#access'] = FALSE;
          break;

        default:
          $build[$cc->getFieldName()][$cc->getFieldDelta()]['#access'] = FALSE;
          break;

      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function cc_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  // @todo detect parameter changes and save
}

/**
 * Implements hook_entity_insert().
 */
function cc_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  // @todo detect parameter changes and save
}

/**
 * Implements hook_entity_delete().
 */
function cc_entity_delete(EntityInterface $entity) {
  // @todo cc_field_conditions table cleanup
}

/**
 * Implements hook_entity_revision_delete().
 */
function cc_entity_revision_delete(EntityInterface $entity) {
  // @todo cc_field_conditions table cleanup
}

/**
 * Implements hook_entity_translation_delete().
 */
function cc_entity_translation_delete(EntityInterface $translation) {
  // @todo cc_field_conditions table cleanup
}
