<?php

/**
 * @file
 * Contains jcc_forms.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters JCC Form Edit page.
 */
function jcc_forms_form_media_jcc_form_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Redirect to JCC Forms view on save.
  $form_state->setRedirect('view.media_jcc_forms.page_1');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_media__jcc_form__full(&$variables, $hook) {

  $lang_props_sets = __jcc_language_sets();

  /** @var Drupal\media\Entity\Media $media */
  $media = $variables['elements']['#media'];
  $form_number = $media->field_number->value;

  foreach ($lang_props_sets as $field_name => $labels ) {
    if(isset($media->$field_name) && $media->$field_name->uri != null) {
      $label_default = $labels->label_default;
      $label_in_language = $labels->label_in_language;
      $link_text = Markup::create('<span aria-hidden="true">' . $label_in_language . '</span>' . '<span class="usa-sr-only">Get form ' . $form_number . ' in ' . $label_default . '</span>');

      /** @var Drupal\core\Url $field_url */
      $field_url = Url::fromUri($media->$field_name->uri);

      /** @var Drupal\Core\Link $link */
      $link = Link::fromTextAndUrl($link_text, $field_url);
      $link_suffix = t(' (@label_default)', array('@label_default' => $label_default));

      $variables['language_links'][$labels->label_default] = [
        $link->toRenderable(),
        '#suffix' => $link_suffix
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_views_view__find_forms__all_by_category(&$variables) {

  if (empty($variables['rows'])) {
    return;
  }

  $variables['forms_by_category'] = __jcc_build_forms_content($variables['rows'][0]['#rows'], 'category');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_views_view__find_forms__all(&$variables) {

  if (empty($variables['rows'])) {
    return;
  }

  $variables['forms_by_number'] = __jcc_build_forms_content($variables['rows'][0]['#rows'], NULL);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_views_view__find_forms__latest_changes(&$variables) {

  if (empty($variables['rows'])) {
    return;
  }

  $variables['latest_changes'] = __jcc_build_forms_content($variables['rows'][0]['#rows'], 'effective');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_views_view__find_forms__latest_unlocked_changes(&$variables) {

  if (empty($variables['rows'])) {
    return;
  }

  $variables['latest_changes'] = __jcc_build_forms_content($variables['rows'][0]['#rows'], 'effective');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_views_view__jcc_forms_search_json_api__page(&$variables) {
  if (empty($variables['rows'])) {
    return;
  }

  $query = $variables['exposed']['query']['#value'];
  $category_info_sets = __jcc_category_info_sets();

  if (!empty($query)) {
    foreach ($category_info_sets as $set) {
      if ($set->query == strtolower($query) && $set->url) {
        $variables['category_info'] = $set;
        break;
      }
    }

    $variables['query'] = $query;
    $variables['search_results'] = __jcc_build_forms_content($variables['rows'][0]['#rows'], NULL);
  } else {
    $popular_topics = [];
    foreach ($category_info_sets as $set) {
      if (isset($set->promote) && $set->promote == TRUE) {
        $topic = [
          'url_title' => $set->title,
          'url' => '/find-forms?query=' . $set->query
        ];
        $popular_topics[] = $topic;
      }
      $variables['popular_topics'] = $popular_topics;
    }
  }
}

function __jcc_language_sets() {
  $data = file_get_contents(\Drupal::service('extension.path.resolver')->getPath('module', 'jcc_forms') . '/jcc_forms-language-labels.json');

  return json_decode($data);
}

function __jcc_category_info_sets() {
  $data = file_get_contents(\Drupal::service('extension.path.resolver')->getPath('module', 'jcc_forms') . '/jcc_forms-category-info.json');

  return json_decode($data);
}

function __jcc_build_forms_content($rows, $organize_by) {
  $lang_props_sets = __jcc_language_sets();
  $forms = [];
  $label_no_category = 'Miscellaneous';
  $label_revoked = 'Revoked';

  foreach ($rows as $row) {
    $item = $row['#row'];
    $form_number = $item->_entity->field_number->value;
    // Internal categories are being stored as form prefix labels
    $item_category = $item->_entity->field_form_prefix->referencedEntities();

    // Forms information button.
    /** @var Drupal\core\Url $information_url */
    $information_url = '/jcc-form/' . $form_number;
    $information_btn = Markup::create('<a class="usa-button usa-button--outline" href="' . $information_url . '" target="_blank">See form info</a>');

    // Download button.
    /** @var Drupal\core\Url $download_url */
    $download_url = $item->_entity->field_url->uri;
    $download_btn = Markup::create('<a class="usa-button usa-button--outline" href="' . $download_url . '">Download</a>');
    // Unlocked version.
    $path = explode('/', $download_url);
    $download_unlocked_url = 'https://jrn.courts.ca.gov/jc/forms/documents/' . $path[sizeof($path)-1];

    // Check for language variants.
    $item_languages = [];
    foreach ($lang_props_sets as $field_name => $labels) {
      if (isset($item->_entity->$field_name) && $item->_entity->$field_name->uri != null) {
        $label_in_language = $labels->label_in_language;
        $link_text = Markup::create('<span class="radius-pill tag">' . $label_in_language . '</span>');

        $item_languages[] = $link_text;
      }
    }

    // Form states.
    $is_revoked = $item->_entity->field_revoke_form->value;

    // List forms.
    $category = $label_no_category;
    if ($item_category) {
      $category = $item_category[0]->field_form_prefix_label->value;
    }
    $form = [
      'number' => $form_number,
      'name' => $item->_entity->name->value,
      'category' => $category,
      'mandatory' => $item->_entity->field_mandatory->value,
      'effective_date' => $item->_entity->field_date_effective->value,
      'url' => $information_url,
      'information' => $information_btn,
      'download' => $download_btn,
      'languages' => $item_languages
    ];
    if ($organize_by == 'effective') {
      if ($is_revoked) {
        $category = $label_revoked;
      }
      $effective_dates = $item->_entity->field_date_effective;
      $action_dates = $item->_entity->field_action_date;
      $i = 0;
      foreach ($effective_dates as $effective_date) {
        $form = [
          'number' => $form_number,
          'name' => $item->_entity->name->value,
          'category' => strpos($category, ':') ? substr($category, 0, strpos($category, ':')) : $category,
          'effective_date' => $effective_date->value,
          'action_date' => count($action_dates) > 1 ? $action_dates[$i]->value : $action_dates->value,
          'download' => $download_url,
          'download_unlocked' => $download_unlocked_url,
          'is_new' => $item->_entity->field_new_form->value,
          'is_revoked' => $is_revoked
        ];
        if (!in_array($form, $forms)) {
          $forms[] = $form;
        }

        $i++;
      }
    } else {
      if (!in_array($form, $forms)) {
        $forms[] = $form;
      }
    }
  }

  // Group forms by category.
  if ($organize_by == 'category') {
    $forms_by_category = [];
    foreach ($forms as $value) {
      if ($value['category']) {
        $category = $value['category'];
        $forms_by_category[$category][] = $value;
      }
    }

    // Sort categories alphabetically.
    ksort($forms_by_category);

    $forms = $forms_by_category;
  }

  // Group forms by effective date.
  if ($organize_by == 'effective') {
    // Ensure category & number sort.
    usort($forms, fn($a, $b) => $a['category'] <=> $b['category']);
    usort($forms, fn($a, $b) => $a['number'] <=> $b['number']);
    $forms_by_effective = [];
    foreach ($forms as $value) {
      if ($value['effective_date']) {
        $category = $value['category'];
        $effective = $value['effective_date'];
        $approved = $value['action_date'];
        $organizer = $effective . '-' . $approved;
        $forms_by_effective[$organizer][$category][] = $value;
        // Revoked forms listed last.
        if (isset($forms_by_effective[$organizer][$label_revoked])) {
          $revoked = $forms_by_effective[$organizer][$label_revoked];
          unset($forms_by_effective[$organizer][$label_revoked]);
          $forms_by_effective[$organizer][$label_revoked] = $revoked;
        }
      }
    }

    // Sort chronologically.
    krsort($forms_by_effective);

    $forms = $forms_by_effective;
  }

  return $forms;
}

