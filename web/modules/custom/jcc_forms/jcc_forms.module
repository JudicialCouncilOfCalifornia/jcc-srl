<?php

/**
 * @file
 * Contains jcc_forms.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters JCC Form Edit page.
 */
function jcc_forms_form_media_jcc_form_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Redirect to JCC Forms view on save.
  $form_state->setRedirect('view.media_jcc_forms.page_1');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_media__jcc_form__full(&$variables, $hook) {

  $lang_props_sets = __jcc_language_sets();

  /** @var Drupal\media\Entity\Media $media */
  $media = $variables['elements']['#media'];
  $form_number = $media->field_number->value;

  foreach ($lang_props_sets as $field_name => $labels ) {
    if(isset($media->$field_name) && $media->$field_name->uri != null) {
      $label_default = $labels->label_default;
      $label_in_language = $labels->label_in_language;
      $link_text = Markup::create('<span aria-hidden="true">' . $label_in_language . '</span>' . '<span class="usa-sr-only">Get form ' . $form_number . ' in ' . $label_default . '</span>');

      /** @var Drupal\core\Url $field_url */
      $field_url = Url::fromUri($media->$field_name->uri);

      /** @var Drupal\Core\Link $link */
      $link = Link::fromTextAndUrl($link_text, $field_url);
      $link_suffix = t(' (@label_default)', array('@label_default' => $label_default));

      $variables['language_links'][$labels->label_default] = [
        $link->toRenderable(),
        '#suffix' => $link_suffix
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jcc_forms_preprocess_views_view__find_forms__all_by_category(&$variables) {

  if (empty($variables['rows'])) {
    return;
  }

  $lang_props_sets = __jcc_language_sets();
  $forms = [];
  $label_other = 'Other Forms';

  foreach ($variables['rows'][0]['#rows'] as $row) {
    $item = $row['#row'];
    $form_number = $item->_entity->field_number->value;
    // Internal categories are being stored as form prefix labels
    $item_category = $item->_entity->field_form_prefix->referencedEntities();

    // Forms information button.
    /** @var Drupal\core\Url $information_url */
    //$information_url = Url::fromUri($item->_entity->$field_name->uri);
    $information_url = '/jcc-form/' . $form_number;
    $information_btn = Markup::create('<a class="usa-button usa-button--outline" href="' . $information_url . '">See form info</a>');

    // Download button.
    /** @var Drupal\core\Url $download_url */
    $download_url = $item->_entity->field_url->uri;
    $download_btn = Markup::create('<a class="usa-button usa-button--outline" href="' . $download_url . '">Download</a>');

    // Check for language variants.
    $item_languages = [];
    foreach ($lang_props_sets as $field_name => $labels) {
      if(isset($item->_entity->$field_name) && $item->_entity->$field_name->uri != null) {
        $label_in_language = $labels->label_in_language;
        $link_text = Markup::create('<span class="radius-pill tag">' . $label_in_language . '</span>');

        /** @var Drupal\core\Url $field_url */
        //$field_url = Url::fromUri($item->_entity->$field_name->uri);

        /** @var Drupal\Core\Link $link */
        //$link = Link::fromTextAndUrl($link_text, $field_url);

        array_push($item_languages, $link_text);
      }
    }

    // List forms.
    $category = $label_other;
    if ($item_category) {
      $category = $item_category[0]->field_form_prefix_label->value;
    }
    $form = [
      'number' => $form_number,
      'description' => $item->_entity->name->value,
      'category' => $category,
      'mandatory' => $item->_entity->field_mandatory->value,
      'revision_date' => $item->_entity->field_revision_date->value,
      'url' => $information_url,
      'information' => $information_btn,
      'download' => $download_btn,
      'languages' => $item_languages
    ];

    // Do not list duplicates for the same category.
    if (!in_array($form, $forms)) {
      array_push($forms, $form);
    }
  }

  // Group forms by category.
  $forms_by_category = [];
  foreach ($forms as $value) {
    if ($value['category']) {
      $category = $value['category'];
      $forms_by_category[$category][] = $value;
    }
  }

  // Sort groups alphabetically.
  ksort($forms_by_category);

  // List uncategorized forms last.
  $others = $forms_by_category[$label_other];
  unset($forms_by_category[$label_other]);
  $forms_by_category[$label_other] = $others;

  $variables['forms_by_category'] = $forms_by_category;
}

function __jcc_language_sets() {
  $data = file_get_contents(drupal_get_path('module', 'jcc_forms'). '/jcc_forms-language-labels.json');

  return json_decode($data);
}

